import tweepy
import openai
import os
import time

# üîπ R√©cup√©rer les cl√©s API depuis les variables d'environnement Heroku
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
ACCESS_SECRET = os.getenv("ACCESS_SECRET")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# üîπ V√©rification des cl√©s API
if not API_KEY or not API_SECRET or not ACCESS_TOKEN or not ACCESS_SECRET or not OPENAI_API_KEY:
    print("‚ùå Erreur : Une ou plusieurs cl√©s API sont manquantes ! V√©rifie les Config Vars sur Heroku.")
    exit(1)

# üîπ Configuration de l‚ÄôAPI Twitter v2
client = tweepy.Client(
    consumer_key=API_KEY,
    consumer_secret=API_SECRET,
    access_token=ACCESS_TOKEN,
    access_token_secret=ACCESS_SECRET
)

# üîπ Configuration de OpenAI
openai.api_key = OPENAI_API_KEY

# üîπ Fonction pour g√©n√©rer un tweet sarcastique avec OpenAI GPT-4
def generate_tweet():
    prompt = "G√©n√®re un tweet sarcastique et dr√¥le sur un sujet d'actualit√© en moins de 280 caract√®res."
    
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )

    return response.choices[0].message.content[:280]  # Limite √† 280 caract√®res

# üîπ Fonction pour poster un tweet
def post_tweet():
    try:
        tweet = generate_tweet()
        response = client.create_tweet(text=tweet)
        print(f"‚úÖ Tweet envoy√© : {tweet}, ID: {response.data['id']}")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi du tweet : {e}")

# üîπ Boucle pour tweeter toutes les 2 heures
while True:
    post_tweet()
    time.sleep(7200)  # 2 heures